// Code generated by Stan version 2.17.1

#include <stan/model/model_header.hpp>

namespace stan_qLearning_5params_opponency_session_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "C:/Users/cooper_PC/Desktop/githubRepositories/cooperAnalysis/matlabCode/operantMatching/learningModels/stan/stan_qLearning_5params_opponency_session.stan");
    reader.add_event(55, 55, "end", "C:/Users/cooper_PC/Desktop/githubRepositories/cooperAnalysis/matlabCode/operantMatching/learningModels/stan/stan_qLearning_5params_opponency_session.stan");
    return reader;
}

class stan_qLearning_5params_opponency_session_model : public prob_grad {
private:
    int T;
    vector<int> choice;
    vector<int> outcome;
public:
    stan_qLearning_5params_opponency_session_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    stan_qLearning_5params_opponency_session_model(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "stan_qLearning_5params_opponency_session_model_namespace::stan_qLearning_5params_opponency_session_model";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "T", "int", context__.to_vec());
            T = int(0);
            vals_i__ = context__.vals_i("T");
            pos__ = 0;
            T = vals_i__[pos__++];
            current_statement_begin__ = 3;
            validate_non_negative_index("choice", "T", T);
            context__.validate_dims("data initialization", "choice", "int", context__.to_vec(T));
            validate_non_negative_index("choice", "T", T);
            choice = std::vector<int>(T,int(0));
            vals_i__ = context__.vals_i("choice");
            pos__ = 0;
            size_t choice_limit_0__ = T;
            for (size_t i_0__ = 0; i_0__ < choice_limit_0__; ++i_0__) {
                choice[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 4;
            validate_non_negative_index("outcome", "T", T);
            context__.validate_dims("data initialization", "outcome", "int", context__.to_vec(T));
            validate_non_negative_index("outcome", "T", T);
            outcome = std::vector<int>(T,int(0));
            vals_i__ = context__.vals_i("outcome");
            pos__ = 0;
            size_t outcome_limit_0__ = T;
            for (size_t i_0__ = 0; i_0__ < outcome_limit_0__; ++i_0__) {
                outcome[i_0__] = vals_i__[pos__++];
            }

            // validate, data variables
            current_statement_begin__ = 2;
            check_greater_or_equal(function__,"T",T,1);
            check_less_or_equal(function__,"T",T,1000);
            current_statement_begin__ = 3;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                check_greater_or_equal(function__,"choice[k0__]",choice[k0__],0);
                check_less_or_equal(function__,"choice[k0__]",choice[k0__],2);
            }
            current_statement_begin__ = 4;
            for (int k0__ = 0; k0__ < T; ++k0__) {
                check_greater_or_equal(function__,"outcome[k0__]",outcome[k0__],0);
                check_less_or_equal(function__,"outcome[k0__]",outcome[k0__],1);
            }
            // initialize data variables


            // validate transformed data

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 8;
            validate_non_negative_index("aN", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 9;
            validate_non_negative_index("aP", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 10;
            validate_non_negative_index("aF", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 11;
            validate_non_negative_index("beta", "1", 1);
            num_params_r__ += 1;
            current_statement_begin__ = 12;
            validate_non_negative_index("v", "1", 1);
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~stan_qLearning_5params_opponency_session_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("aN")))
            throw std::runtime_error("variable aN missing");
        vals_r__ = context__.vals_r("aN");
        pos__ = 0U;
        validate_non_negative_index("aN", "1", 1);
        context__.validate_dims("initialization", "aN", "vector_d", context__.to_vec(1));
        vector_d aN(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            aN(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,aN);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable aN: ") + e.what());
        }

        if (!(context__.contains_r("aP")))
            throw std::runtime_error("variable aP missing");
        vals_r__ = context__.vals_r("aP");
        pos__ = 0U;
        validate_non_negative_index("aP", "1", 1);
        context__.validate_dims("initialization", "aP", "vector_d", context__.to_vec(1));
        vector_d aP(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            aP(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,aP);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable aP: ") + e.what());
        }

        if (!(context__.contains_r("aF")))
            throw std::runtime_error("variable aF missing");
        vals_r__ = context__.vals_r("aF");
        pos__ = 0U;
        validate_non_negative_index("aF", "1", 1);
        context__.validate_dims("initialization", "aF", "vector_d", context__.to_vec(1));
        vector_d aF(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            aF(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,aF);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable aF: ") + e.what());
        }

        if (!(context__.contains_r("beta")))
            throw std::runtime_error("variable beta missing");
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "1", 1);
        context__.validate_dims("initialization", "beta", "vector_d", context__.to_vec(1));
        vector_d beta(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            beta(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,20,beta);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable beta: ") + e.what());
        }

        if (!(context__.contains_r("v")))
            throw std::runtime_error("variable v missing");
        vals_r__ = context__.vals_r("v");
        pos__ = 0U;
        validate_non_negative_index("v", "1", 1);
        context__.validate_dims("initialization", "v", "vector_d", context__.to_vec(1));
        vector_d v(static_cast<Eigen::VectorXd::Index>(1));
        for (int j1__ = 0U; j1__ < 1; ++j1__)
            v(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_lub_unconstrain(0,1,v);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable v: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aN;
            (void) aN;  // dummy to suppress unused var warning
            if (jacobian__)
                aN = in__.vector_lub_constrain(0,1,1,lp__);
            else
                aN = in__.vector_lub_constrain(0,1,1);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aP;
            (void) aP;  // dummy to suppress unused var warning
            if (jacobian__)
                aP = in__.vector_lub_constrain(0,1,1,lp__);
            else
                aP = in__.vector_lub_constrain(0,1,1);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  aF;
            (void) aF;  // dummy to suppress unused var warning
            if (jacobian__)
                aF = in__.vector_lub_constrain(0,1,1,lp__);
            else
                aF = in__.vector_lub_constrain(0,1,1);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_lub_constrain(0,20,1,lp__);
            else
                beta = in__.vector_lub_constrain(0,20,1);

            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  v;
            (void) v;  // dummy to suppress unused var warning
            if (jacobian__)
                v = in__.vector_lub_constrain(0,1,1,lp__);
            else
                v = in__.vector_lub_constrain(0,1,1);


            // transformed parameters



            // validate transformed parameters

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // model body
            {
            current_statement_begin__ = 16;
            validate_non_negative_index("Q", "2", 2);
            Eigen::Matrix<local_scalar_t__,Eigen::Dynamic,1>  Q(static_cast<Eigen::VectorXd::Index>(2));
            (void) Q;  // dummy to suppress unused var warning

            stan::math::initialize(Q, DUMMY_VAR__);
            stan::math::fill(Q,DUMMY_VAR__);
            current_statement_begin__ = 17;
            local_scalar_t__ PE;
            (void) PE;  // dummy to suppress unused var warning

            stan::math::initialize(PE, DUMMY_VAR__);
            stan::math::fill(PE,DUMMY_VAR__);
            current_statement_begin__ = 18;
            local_scalar_t__ rBar;
            (void) rBar;  // dummy to suppress unused var warning

            stan::math::initialize(rBar, DUMMY_VAR__);
            stan::math::fill(rBar,DUMMY_VAR__);


            current_statement_begin__ = 21;
            lp_accum__.add(normal_log<propto__>(aN, 0.5, 1));
            current_statement_begin__ = 22;
            lp_accum__.add(normal_log<propto__>(aP, 0.5, 1));
            current_statement_begin__ = 23;
            lp_accum__.add(normal_log<propto__>(aF, 0.5, 1));
            current_statement_begin__ = 24;
            lp_accum__.add(normal_log<propto__>(beta, 5, 5));
            current_statement_begin__ = 25;
            lp_accum__.add(normal_log<propto__>(v, 0.0050000000000000001, 0.01));
            current_statement_begin__ = 30;
            stan::math::assign(Q, rep_vector(0.0,2));
            current_statement_begin__ = 31;
            stan::math::assign(rBar, 0.40000000000000002);
            current_statement_begin__ = 34;
            for (int t = 1; t <= T; ++t) {

                current_statement_begin__ = 36;
                lp_accum__.add(categorical_logit_log<propto__>(get_base1(choice,t,"choice",1), multiply(get_base1(beta,1,"beta",1),Q)));
                current_statement_begin__ = 39;
                stan::math::assign(PE, ((get_base1(outcome,t,"outcome",1) - get_base1(Q,get_base1(choice,t,"choice",1),"Q",1)) - rBar));
                current_statement_begin__ = 42;
                if (as_bool(logical_lt(PE,0))) {

                    current_statement_begin__ = 43;
                    stan::math::assign(get_base1_lhs(Q,get_base1(choice,t,"choice",1),"Q",1), (get_base1(Q,get_base1(choice,t,"choice",1),"Q",1) + (get_base1(aN,1,"aN",1) * PE)));
                } else {

                    current_statement_begin__ = 46;
                    stan::math::assign(get_base1_lhs(Q,get_base1(choice,t,"choice",1),"Q",1), (get_base1(Q,get_base1(choice,t,"choice",1),"Q",1) + (get_base1(aP,1,"aP",1) * PE)));
                }
                current_statement_begin__ = 48;
                if (as_bool(logical_eq(get_base1(choice,t,"choice",1),1))) {

                    current_statement_begin__ = 49;
                    stan::math::assign(get_base1_lhs(Q,2,"Q",1), (get_base1(Q,2,"Q",1) * get_base1(aF,1,"aF",1)));
                } else {

                    current_statement_begin__ = 51;
                    stan::math::assign(get_base1_lhs(Q,1,"Q",1), (get_base1(Q,1,"Q",1) * get_base1(aF,1,"aF",1)));
                }
                current_statement_begin__ = 53;
                stan::math::assign(rBar, ((get_base1(v,1,"v",1) * get_base1(outcome,t,"outcome",1)) + ((1 - get_base1(v,1,"v",1)) * rBar)));
            }
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("aN");
        names__.push_back("aP");
        names__.push_back("aF");
        names__.push_back("beta");
        names__.push_back("v");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(1);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__,params_i__);
        static const char* function__ = "stan_qLearning_5params_opponency_session_model_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d aN = in__.vector_lub_constrain(0,1,1);
        vector_d aP = in__.vector_lub_constrain(0,1,1);
        vector_d aF = in__.vector_lub_constrain(0,1,1);
        vector_d beta = in__.vector_lub_constrain(0,20,1);
        vector_d v = in__.vector_lub_constrain(0,1,1);
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(aN[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(aP[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(aF[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(beta[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < 1; ++k_0__) {
            vars__.push_back(v[k_0__]);
            }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {



            // validate transformed parameters

            // write transformed parameters
            if (include_tparams__) {
            }
            if (!include_gqs__) return;
            // declare and define generated quantities



            // validate generated quantities

            // write generated quantities
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "stan_qLearning_5params_opponency_session_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aN" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aP" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aF" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aN" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aP" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "aF" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= 1; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "v" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
        }


        if (!include_gqs__) return;
    }

}; // model

}

typedef stan_qLearning_5params_opponency_session_model_namespace::stan_qLearning_5params_opponency_session_model stan_model;

